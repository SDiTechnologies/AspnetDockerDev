

ARG REPO=mcr.microsoft.com/dotnet/aspnet
FROM $REPO:6.0.7-bullseye-slim-amd64 AS build

##############################################################################
# Create base dotnet image

ENV \
    # Unset ASPNETCORE_URLS from aspnet base image
    ASPNETCORE_URLS= \
    # Do not generate certificate
    DOTNET_GENERATE_ASPNET_CERTIFICATE=false \
    # Do not show first run text
    DOTNET_NOLOGO=true \
    # SDK version
    DOTNET_SDK_VERSION=6.0.302 \
    # Enable correct mode for dotnet watch (only mode supported in a container)
    DOTNET_USE_POLLING_FILE_WATCHER=true \
    # Skip extraction of XML docs - generally not useful within an image/container - helps performance
    NUGET_XMLDOC_MODE=skip \
    # PowerShell telemetry for docker image usage
    POWERSHELL_DISTRIBUTION_CHANNEL=PSDocker-DotnetSDK-Debian-11

##############################################################################

# Required for node install
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        curl \
        git \
        wget \
    && rm -rf /var/lib/apt/lists/*

# Install .NET SDK
RUN curl -fSL --output dotnet.tar.gz https://dotnetcli.azureedge.net/dotnet/Sdk/$DOTNET_SDK_VERSION/dotnet-sdk-$DOTNET_SDK_VERSION-linux-x64.tar.gz \
    && dotnet_sha512='ac1d124802ca035aa00806312460b371af8e3a55d85383ddd8bb66f427c4fabae75b8be23c45888344e13b283a4f9c7df228447c06d796a57ffa5bb21992e6a4' \
    && echo "$dotnet_sha512  dotnet.tar.gz" | sha512sum -c - \
    && mkdir -p /usr/share/dotnet \
    && tar -oxzf dotnet.tar.gz -C /usr/share/dotnet ./packs ./sdk ./sdk-manifests ./templates ./LICENSE.txt ./ThirdPartyNotices.txt \
    && rm dotnet.tar.gz \
    # Trigger first run experience by running arbitrary cmd
    && dotnet help

# Install PowerShell global tool
RUN powershell_version=7.2.5 \
    && curl -fSL --output PowerShell.Linux.x64.$powershell_version.nupkg https://pwshtool.blob.core.windows.net/tool/$powershell_version/PowerShell.Linux.x64.$powershell_version.nupkg \
    && powershell_sha512='459fdc6efff0a5b38d1485b28ae97b39352011a237cbd0addd48390aa4caef87db25e8caab7c55b8e050b95f772df0712a3b29973504fcbae10df17aa6773af3' \
    && echo "$powershell_sha512  PowerShell.Linux.x64.$powershell_version.nupkg" | sha512sum -c - \
    && mkdir -p /usr/share/powershell \
    && dotnet tool install --add-source / --tool-path /usr/share/powershell --version $powershell_version PowerShell.Linux.x64 \
    && dotnet nuget locals all --clear \
    && rm PowerShell.Linux.x64.$powershell_version.nupkg \
    && ln -s /usr/share/powershell/pwsh /usr/bin/pwsh \
    && chmod 755 /usr/share/powershell/pwsh \
    # To reduce image size, remove the copy nupkg that nuget keeps.
    && find /usr/share/powershell -print | grep -i '.*[.]nupkg$' | xargs rm


##############################################################################
# Install node
# Set debconf to run non-interactively
RUN echo 'debconf debconf/frontend select noninteractive' | debconf-set-selections

ENV NVM_DIR /usr/local/nvm

##############################################################################

RUN apt-get update; \
    apt-get full-upgrade -y; \
    apt-get install -y --no-install-recommends \
        ca-certificates \
        build-essential \
        bash \
        nodejs \
        npm \
        nginx \
    ; \
    apt-get clean; \
    rm -rf /var/lib/apt/lists/*

# # nginx install
# RUN apt update && \
#     apt install -y --no-install-recommends nginx && \
#     rm -rf /var/lib/apt/lists/* && \
#     apt clean && \
#     rm /etc/nginx/nginx.conf

# SHELL ["/bin/bash", "-i", "-l", "-euxo", "pipefail", "-c"]
# # Install npm via nvm; ensure $PATH environment variable includes nvm/npm directory
# RUN mkdir -p "$NVM_DIR"; \
#     curl -o- \
#         "https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh" | \
#         bash \
#     ; \
#     source "$NVM_DIR/nvm.sh"; \
#     nvm install --lts --latest-npm;


##############################################################################


ENV \
    APP=MvcWebApp

WORKDIR /src

COPY *.sln .
COPY $APP/*.csproj ./$APP/
RUN dotnet restore

COPY $APP/. ./$APP/

WORKDIR /src/$APP

# generate certs
RUN dotnet dev-certs https
